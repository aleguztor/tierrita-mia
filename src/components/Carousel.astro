---
import { Image } from 'astro:assets'
import zamburinas from '../assets/zamburinas.jpg'
import sardinas from '../assets/sardinas.jpg'

import pulpo from '../assets/pulpogallega.jpg'

import boquerones from '../assets/boquerones.jpeg'
---

<div class="container-carousel">
  <div class="carousel">
    <div class="carousel-images">
      <Image loading={'lazy'} src={zamburinas} alt="Image 3" />
      <Image loading={'lazy'} src={sardinas} alt="Image 2" />
      <img loading={'lazy'} src={pulpo.src} alt="Image 3" />
      <Image loading={'lazy'} src={boquerones} alt="Image 2" />
    </div>
    <div class="carousel-buttons">
      <button id="prev">{'<'}</button>
      <button id="next">{'>'}</button>
    </div>
  </div>
  <div class="carousel-indicators" id="indicators"></div>
</div>
<style>
  .carousel {
    position: relative;
    width: 600px;
    aspect-ratio: 6/2.84;
    border-radius: 5px;
    z-index: 5;
    overflow: hidden;
  }
  .carousel-images {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }
  .carousel-hover-button-left {
    box-shadow: inset 50px 0px 100px var(--secondary);
  }
  .carousel-hover-button-right {
    box-shadow: inset -50px 0px 100px var(--secondary);
  }
  .carousel img {
    width: 100%;
    height: 100%;
    display: block;
  }
  .carousel-buttons {
    position: absolute;
    top: 50%;
    width: 100%;
    aspect-ratio: 6/2.84;
    display: flex;
    justify-content: space-between;
    transform: translateY(-50%);
    transition: all 200ms ease-out;
    button {
      background: transparent;
      color: var(--secondary);
      border: none;
      height: 100%;
      font-size: 50px;
      padding: 10px;
      cursor: pointer;
      transition: all 300ms;
    }
    button:hover {
      color: var(--primary);
    }
  }

  .carousel-indicators {
    display: flex;
    justify-content: center;
    width: 100%;
    margin-top: 10px;
  }
  .carousel-indicators {
    button {
      background-color: var(--primary);
      border: none;
      width: 20px;
      height: 4px;
      margin: 0 5px;
      border-radius: 2px;
      cursor: pointer;
    }
    .active {
      background-color: var(--link);
    }
  }
  @media only screen and (max-width: 630px) {
    .carousel {
      width: 100vw;
      height: auto;
    }
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const images = document.querySelector('.carousel-images') as HTMLImageElement
    const imagesContainer = document.querySelector('.carousel-buttons')

    if (images) {
      const totalImages = images.children.length
      let index = 0
      function createIndicators() {
        const indicators = document.getElementById('indicators')
        for (let i = 0; i < totalImages; i++) {
          const button = document.createElement('button')
          button.addEventListener('click', () => {
            index = i
            updateCarousel()
          })

          indicators!.appendChild(button)
        }
      }
      function updateCarousel() {
        images.style.transform = `translateX(-${index * 100}%)`
        document.querySelectorAll('.carousel-indicators button').forEach((btn, i) => {
          btn.classList.toggle('active', i === index)
        })
      }
      const next = document.getElementById('next')
      const prev = document.getElementById('prev')

      next!.addEventListener('click', () => {
        index = (index + 1) % totalImages
        updateCarousel()
      })
      next!.addEventListener('mouseover', () => {
        imagesContainer!.classList.add('carousel-hover-button-right')
      })
      next!.addEventListener('mouseout', () => {
        imagesContainer!.classList.remove('carousel-hover-button-right')
      })
      prev!.addEventListener('mouseover', () => {
        imagesContainer!.classList.add('carousel-hover-button-left')
      })
      prev!.addEventListener('mouseout', () => {
        imagesContainer!.classList.remove('carousel-hover-button-left')
      })

      prev!.addEventListener('click', () => {
        index = (index - 1 + totalImages) % totalImages
        updateCarousel()
      })

      setInterval(() => {
        index = (index + 1) % totalImages
        updateCarousel()
      }, 10000)
      createIndicators()
      updateCarousel()
    }
  })
</script>
